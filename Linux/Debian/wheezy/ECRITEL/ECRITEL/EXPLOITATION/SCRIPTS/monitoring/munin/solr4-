#!/usr/bin/python
#V0.1 - Copyright 2015 Jerome Lemaire jlemaire@ecritel.net
#
#This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


#http://localhost:8983/solr/CORENAME/admin/mbeans?stats=true
#http://localhost:8983/solr/CORENAME/admin/system?stats=true
#http://localhost:8983/solr/admin/cores?action=STATUS

#links :
#solr4-core0-docs
#solr4-core0-size
#solr4-core0-memory
#solr4-core0-queryhandlerstandard
#solr4-core0-queryhandlerdataimport

import httplib, sys, os
from lxml import etree

callname = os.path.basename(sys.argv[0]).split('-', 2)[1:]
parameters = {
'core': callname[0],
'metric': callname[1],
'action': 'config' if sys.argv[-1] == 'config' else 'fetch'
}

def queryhandler( core, metric, action, handlertype ):
	if action == 'config':
		print "navgRequestsPerSecond.label avgRequestsPerSecond"
		print "n5minRateReqsPerSecond.label 5minRateReqsPerSecond"
		print "n15minRateReqsPerSecond.label 15minRateReqsPerSecond"
		print "navgTimePerRequest.label avgTimePerRequest"
		print "nmedianRequestTime.label medianRequestTime"
		print "n75thPcRequestTime.label 75thPcRequestTime"
		print "n95thPcRequestTime.label 95thPcRequestTime"
		print "n99thPcRequestTime.label 99thPcRequestTime"
		print "n999thPcRequestTime.label 999thPcRequestTime"
	else:
		if handlertype == "standard":
			handlerkey="standard"
		elif handlertype == "dataimport":
			handlerkey="/dataimport"

		conn.request("GET", "/solr/" + core + "/admin/mbeans?stats=true&cat=QUERYHANDLER&key=" + handlerkey)
		res = conn.getresponse()
		if res.status == 200:
			data = res.read()
			root = etree.fromstring(data)
			avgRequestsPerSecond = root.xpath("/response/lst[@name='solr-mbeans']/lst[@name='QUERYHANDLER']/lst[@name='" + handlerkey + "']/lst[@name='stats']/double[@name='avgRequestsPerSecond']")
			n5minRateReqsPerSecond = root.xpath("/response/lst[@name='solr-mbeans']/lst[@name='QUERYHANDLER']/lst[@name='" + handlerkey + "']/lst[@name='stats']/double[@name='5minRateReqsPerSecond']")
			n15minRateReqsPerSecond = root.xpath("/response/lst[@name='solr-mbeans']/lst[@name='QUERYHANDLER']/lst[@name='" + handlerkey + "']/lst[@name='stats']/double[@name='15minRateReqsPerSecond']")
			avgTimePerRequest = root.xpath("/response/lst[@name='solr-mbeans']/lst[@name='QUERYHANDLER']/lst[@name='" + handlerkey + "']/lst[@name='stats']/double[@name='avgTimePerRequest']")
			medianRequestTime = root.xpath("/response/lst[@name='solr-mbeans']/lst[@name='QUERYHANDLER']/lst[@name='" + handlerkey + "']/lst[@name='stats']/double[@name='medianRequestTime']")
			n75thPcRequestTime = root.xpath("/response/lst[@name='solr-mbeans']/lst[@name='QUERYHANDLER']/lst[@name='" + handlerkey + "']/lst[@name='stats']/double[@name='75thPcRequestTime']")
			n95thPcRequestTime = root.xpath("/response/lst[@name='solr-mbeans']/lst[@name='QUERYHANDLER']/lst[@name='" + handlerkey + "']/lst[@name='stats']/double[@name='95thPcRequestTime']")
			n99thPcRequestTime = root.xpath("/response/lst[@name='solr-mbeans']/lst[@name='QUERYHANDLER']/lst[@name='" + handlerkey + "']/lst[@name='stats']/double[@name='99thPcRequestTime']")
			n999thPcRequestTime = root.xpath("/response/lst[@name='solr-mbeans']/lst[@name='QUERYHANDLER']/lst[@name='" + handlerkey + "']/lst[@name='stats']/double[@name='999thPcRequestTime']")
		
		print "navgRequestsPerSecond.value",avgRequestsPerSecond[0].text.strip()
		print "n5minRateReqsPerSecond.value",n5minRateReqsPerSecond[0].text.strip()
		print "n15minRateReqsPerSecond.value",n15minRateReqsPerSecond[0].text.strip()
		print "navgTimePerRequest.value",avgTimePerRequest[0].text.strip()
		print "nmedianRequestTime.value",medianRequestTime[0].text.strip()
		print "n75thPcRequestTime.value",n75thPcRequestTime[0].text.strip()
		print "n95thPcRequestTime.value",n95thPcRequestTime[0].text.strip()
		print "n99thPcRequestTime.value",n99thPcRequestTime[0].text.strip()
		print "n999thPcRequestTime.value",n999thPcRequestTime[0].text.strip()
	
	return

if parameters['action'] == 'config':
	if parameters['metric'] == "docs":
		print "graph_title Solr " + parameters['core'] + " - Docs"
		print "graph_vlabel docs"
		print "docs.label numDocs"
	elif parameters['metric'] == "size":
		print "graph_title Solr " + parameters['core'] + " - Size"
		print "graph_vlabel size"
		print "graph_args --base 1024 -l 0"
		print "size.label sizeInBytes"
	elif parameters['metric'] == "queryhandlerstandard":
		print "graph_title Solr " + parameters['core'] + " - Queryhandler (standard)"
		print "graph_vlabel queryhandlerstandard"
		queryhandler (core=parameters['core'],metric=parameters['metric'],action=parameters['action'], handlertype="standard")
	elif parameters['metric'] == "queryhandlerdataimport":
		print "graph_title Solr " + parameters['core'] + " - Queryhandler (/dataimport)"
		print "graph_vlabel queryhandlerstandard"
		queryhandler (core=parameters['core'],metric=parameters['metric'],action=parameters['action'], handlertype="dataimport")
	elif parameters['metric'] == "memory":
		print "graph_title Solr " + parameters['core'] + " - Memory"
		print "graph_vlabel memory"
		print "graph_args --base 1024 -l 0"
		print "free.label Free"
		print "total.label Total"
		print "max.label Max"
		print "used.label Used"
	else:
		print "error"
		sys.exit(1);

	print "graph_category solr"
else:
	conn = httplib.HTTPConnection("localhost:8983")
	if parameters['metric'] == "docs":
		#conn.request("GET", "/solr/" + parameters['core'] + "/admin/mbeans?stats=true&cat=CORE&key=searcher")
		conn.request("GET", "/solr/admin/cores?action=STATUS")
		res = conn.getresponse()
		if res.status == 200:
			data = res.read()
			root = etree.fromstring(data)
			#numDocs = root.xpath("/response/lst[@name='solr-mbeans']/lst[@name='CORE']/lst[@name='searcher']/lst[@name='stats']/int[@name='numDocs']")
			numDocs = root.xpath("/response/lst[@name='status']/lst[@name='" + parameters['core'] + "']/lst[@name='index']/int[@name='numDocs']")
			print "docs.value",numDocs[0].text.strip()
	elif parameters['metric'] == "size":
		conn.request("GET", "/solr/admin/cores?action=STATUS")
		res = conn.getresponse()
		if res.status == 200:
			data = res.read()
			root = etree.fromstring(data)
			size = root.xpath("/response/lst[@name='status']/lst[@name='" + parameters['core'] + "']/lst[@name='index']/long[@name='sizeInBytes']")
			print "size.value",size[0].text.strip()
	elif parameters['metric'] == "queryhandlerstandard":
		queryhandler (core=parameters['core'],metric=parameters['metric'],action=parameters['action'],handlertype="standard")
	elif parameters['metric'] == "queryhandlerdataimport":
		queryhandler (core=parameters['core'],metric=parameters['metric'],action=parameters['action'], handlertype="dataimport")
	elif parameters['metric'] == "memory":
		conn.request("GET", "/solr/" + parameters['core'] + "/admin/system?stats=true")
		res = conn.getresponse()
		if res.status == 200:
			data = res.read()
			root = etree.fromstring(data)
			free = root.xpath("/response/lst[@name='jvm']/lst[@name='memory']/lst[@name='raw']/long[@name='free']")
			total = root.xpath("/response/lst[@name='jvm']/lst[@name='memory']/lst[@name='raw']/long[@name='total']")
			mmax = root.xpath("/response/lst[@name='jvm']/lst[@name='memory']/lst[@name='raw']/long[@name='max']")
			used = root.xpath("/response/lst[@name='jvm']/lst[@name='memory']/lst[@name='raw']/long[@name='used']")
			print "free.value",free[0].text.strip()
			print "total.value",total[0].text.strip()
			print "max.value",mmax[0].text.strip()
			print "used.value",used[0].text.strip()
	else:
		print "error"
		sys.exit(1);
