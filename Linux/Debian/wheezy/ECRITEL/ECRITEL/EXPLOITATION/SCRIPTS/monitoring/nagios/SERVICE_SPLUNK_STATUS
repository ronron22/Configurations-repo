#!/usr/bin/env bash

##Â script avec pipe !!! ##

# on defini un PATH secure
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/splunkforwarder/bin

# on desactive les alias
\unalias -a

NAME="splunkd"
SPLUNK_FORWARDER_SERVER="forwarder.splunkstorm.com"
PIPE_PATH="/tmp/jesuisunpipe"

_NAGIOS_STATUS_OK=0
_NAGIOS_STATUS_WARNING=1
_NAGIOS_STATUS_CRITICAL=2
_NAGIOS_STATUS_UNKNOWN=3

for MYPROG in splunk mkfifo rm ; do
        if ! type -ap $MYPROG 1> /dev/null ; then
                OUT="UNKNOWN : impossible de trouver $MYPROG" ;
		RCODE=3 ;
        fi
done

# on verifie les arguments (identifiant et MdP)
parse_args() {
	if (($#!=2)) ; then 
		echo "UNKNOWN : merci de specifier un identifiant et un mot de passe" ;
		exit $_NAGIOS_STATUS_UNKNOWN ;
	else
		USERNAME=$1 ;
		PASSWORD=$2 ;
	fi	 
}

# on lance la verification des args 
parse_args $1 $2 

# en fin de script on detruit le pipe
trap "rm -f $PIPE_PATH" EXIT

# on cree le pipe s'il n'existe pas
if [[ ! -p $PIPE_PATH ]]; then
	if ! mkfifo $PIPE_PATH ; then
		OUT="UNKNOWN : impossible de creer le pipe $PIPE_PATH" ;
		RCODE=3 ;
	fi	
fi

# on test que le demon splunkforwarder est lance : code retour 0 
if ! splunk status > /dev/null ; then
	OUT="CRITICAL : impossible d'obtenir le status de $MYPROG" ;
	RCODE=2 ;
fi

# on envoi la sortie de la commande dans le pipe
splunk list forward-server -auth $USERNAME:$PASSWORD > $PIPE_PATH &

# on cree un tableau
while read line ; do
		# on insere le out de la commande precedente via le pipe
		mytab[${#mytab[@]}]="$line" ;
done <  $PIPE_PATH
	
# on parse le tableau
if [[ "${mytab[1]}" =~ "$SPLUNK_FORWARDER_SERVER" ]] ; then
	OUT="OK : le serveur central ${mytab[1]} est dans la file ${mytab[((1-1))]}" ;
	RCODE=0 ;
elif [[ "${mytab[3]}" =~ "$SPLUNK_FORWARDER_SERVER" ]] ; then
	OUT="CRITICAL : le serveur central ${mytab[3]} est dans la file ${mytab[((3-1))]}" ;
	RCODE=2 ;
else
	OUT="UNKNOWN : impossible de traiter la sortie de splunk list forward-server, merci d'intervenir" ; 
	RCODE=3 ;
fi

#####################################
#   moteur de traitement d'erreur   #
#####################################

if (($RCODE==2)) ; then
	echo $OUT ;
	exit $_NAGIOS_STATUS_CRITICAL ;
elif (($RCODE==3)) ; then
	echo $OUT ;
	exit $_NAGIOS_STATUS_UNKNOWN ;
elif (($RCODE==0)) ; then
	echo $OUT ;
	exit $_NAGIOS_STATUS_OK ;
else
	# catch if no match	
	echo "UNKNOWN : une erreur a eu lieu durant le traitement, merci d'intervenir" ;
	exit $_NAGIOS_STATUS_UNKNOWN ;
fi
